name: Compile blueprint

on:
  push:
    branches:
      - main # Trigger on pushes to the default branch
  workflow_dispatch:        # Allow manual triggering of the workflow from the GitHub Actions interface

# Cancel previous runs if a new commit is pushed to the same PR or branch
concurrency:
  group: ${{ github.ref }}  # Group runs by the ref (branch or PR)
  cancel-in-progress: true  # Cancel any ongoing runs in the same group

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read  # Read access to repository contents
  pages: write    # Write access to GitHub Pages
  id-token: write # Write access to ID tokens

jobs:
  build_project:
    runs-on: ubuntu-latest
    name: Build project
    steps:

      - name: cleanup
        shell: bash    # This *just* deletes old files, so is safe to run outside landrun.
        run: |
          if ! find . -mindepth 1 -exec rm -rf -- {} +; then
            echo "ERROR: Initial cleanup failed, waiting 5 seconds and retrying..."
            sleep 5
            find . -mindepth 1 -exec rm -rf -- {} +
          fi
          # Delete all but the 5 most recent toolchains.
          # Make sure to delete both the `~/.elan/toolchains/X` directory and the `~/.elan/update-hashes/X` file.
          # Skip symbolic links (`-type d`), the current directory (`! -name .`), and `nightly` and `stable`.
          if cd ~/.elan/toolchains && find . -maxdepth 1 -type d ! -name . -print0 | xargs -0 ls -1td | grep -v 'nightly$' | grep -v 'stable$' | tail -n +6 | xargs -I {} sh -c 'echo {} && rm -rf "{}" && rm "../update-hashes/{}"'; then
              : # Do nothing on success
          else
              : # Do nothing on failure, but suppress errors
          fi

      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Install elan
        run: curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y

      - name: Get Mathlib cache
        run: ~/.elan/bin/lake exe cache get || true

      - name: Build project
        run: ~/.elan/bin/lake build LeanJot

      - name: Cache API docs
        uses: actions/cache@v4
        with:
          path: |
            .lake/build/doc/Aesop
            .lake/build/doc/Batteries
            .lake/build/doc/find
            .lake/build/doc/Init
            .lake/build/doc/Lake
            .lake/build/doc/Lean
            .lake/build/doc/Mathlib
            .lake/build/doc/Std
          key: Docs-${{ hashFiles('lake-manifest.json') }}

      - name: Build project API documentation
        run: ~/.elan/bin/lake -R -Kenv=dev build LeanJot:docs

      - name: Check for `home_page` folder # this is meant to detect a Jekyll-based website
        id: check_home_page
        run: |
          if [ -d home_page ]; then
            echo "The 'home_page' folder exists in the repository."
            echo "HOME_PAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "The 'home_page' folder does not exist in the repository."
            echo "HOME_PAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build blueprint and copy to `home_page/blueprint`
        uses: xu-cheng/texlive-action@v2
        with:
          docker_image: ghcr.io/xu-cheng/texlive-full:20250101
          run: |
            # Install necessary dependencies and build the blueprint
            apk update
            apk add --update make py3-pip git pkgconfig graphviz graphviz-dev gcc musl-dev
            git config --global --add safe.directory $GITHUB_WORKSPACE
            git config --global --add safe.directory `pwd`
            python3 -m venv env
            source env/bin/activate
            pip install --upgrade pip requests wheel
            pip install pygraphviz --global-option=build_ext --global-option="-L/usr/lib/graphviz/" --global-option="-R/usr/lib/graphviz/"
            pip install leanblueprint
            leanblueprint pdf
            mkdir -p home_page
            cp blueprint/print/print.pdf home_page/blueprint.pdf
            leanblueprint web
            cp -r blueprint/web home_page/blueprint

      - name: Check declarations mentioned in the blueprint exist in Lean code
        run: |
            ~/.elan/bin/lake exe checkdecls blueprint/lean_decls

      - name: Copy API documentation to `home_page/docs`
        run: cp -r .lake/build/doc home_page/docs

      - name: Remove unnecessary lake files from documentation in `home_page/docs`
        run: |
          find home_page/docs -name "*.trace" -delete
          find home_page/docs -name "*.hash" -delete

      - name: Bundle dependencies
        uses: ruby/setup-ruby@v1
        with:
          working-directory: home_page
          ruby-version: "3.0"  # Specify Ruby version
          bundler-cache: true  # Enable caching for bundler

      - name: Build website using Jekyll
        if: env.HOME_PAGE_EXISTS == 'true'
        working-directory: home_page
        env:
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: JEKYLL_ENV=production bundle exec jekyll build  # Note this will also copy the blueprint and API doc into home_page/_site

      - name: "Upload website (API documentation, blueprint and any home page)"
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.HOME_PAGE_EXISTS == 'true' && 'home_page/_site' || 'home_page/' }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Make sure the API documentation cache works
        run: mv home_page/docs .lake/build/doc
